---

- name: Ensure Terraform bin directory exists
  file:
    path: "{{ terraform_binary_directory }}"
    state: directory

- name: Download Terraform binary
  unarchive:
    remote_src: yes
    src: "{{ terraform_binary_url }}"
    dest: "{{ terraform_binary_directory }}"

- name: Provision infrastructure using Terraform
  terraform:
    binary_path: "{{ terraform_binary_path }}"
    project_path: "{{ terraform_project_path }}"
    state: "{{ terraform_state }}"
    force_init: yes
    variables: "{{ terraform_variables }}"
  register: terraform_provision

- name: Populate in-memory inventory
  block:
    - name: Set facts from Terraform outputs
      set_fact:
        cluster_gateway_ip: "{{ terraform_provision.outputs.cluster_gateway_ip.value }}"
        cluster_nodes: "{{ terraform_provision.outputs.cluster_nodes.value }}"

    - name: Add cluster nodes to in-memory inventory
      add_host:
        name: "{{ node.name }}"
        groups: "{{ node.groups }}"
        ansible_host: "{{ node.ip }}"
        ansible_user: "{{ cluster_ssh_user }}"
        # ansible_ssh_private_key_file: "{{ cluster_ssh_private_key_file }}"
        # The hosts are accessed via a bastion using a proxy command
        # We can't just use ProxyJump here because we need agent forwarding, which is disabled even when
        # StrictHostKeyChecking=no in the case where a host key changes and the host is still in the
        # UserKnownHostsFile
        # So we need to make sure that the UserKnownHostsFile is empty for the proxy command
        ansible_ssh_common_args: "-o ProxyCommand='ssh -o UserKnownHostsFile=/dev/null -W %h:%p {{ cluster_gateway_user }}@{{ cluster_gateway_ip }}'"
      loop: "{{ cluster_nodes }}"
      loop_control:
        loop_var: node
        label: "{{ node.name }}"
  when: terraform_state == 'present'
