---

# Provision the infrastructure using Terraform
- name: Provision infrastructure
  hosts: openstack
  pre_tasks:
    - name: Verify that OpenStack project ID is set
      assert:
        that: "openstack_project_id != ''"
        msg: "openstack_project_id is not set"

    # We need to convert the floating IP id to an address
    - name: Look up floating IP
      include_role:
        name: terraform_infra
        tasks_from: lookup_floating_ip
      vars:
        os_floating_ip_id: "{{ cluster_floating_ip }}"
  roles:
    - role: terraform_infra
      vars:
        # Variables controlling the Terraform provisioning
        terraform_project_path: "{{ playbook_dir }}/terraform"
        terraform_state: "{{ cluster_state | default('present') }}"
        terraform_backend_config:
          path: "{{ terraform_path_prefix }}{{ cluster_id }}"
        terraform_variables:
          cluster_name: "{{ cluster_name }}"
          cluster_network: "{{ cluster_network }}"
          cluster_floating_ip: "{{ os_floating_ip_info.floating_ip_address }}"
          # We need to inject the user's SSH key and the deploy key for the cluster
          cluster_ssh_public_keys: "{{ [cluster_deploy_ssh_public_key, cluster_user_ssh_public_key] | to_json }}"
          compute_count: "{{ compute_count }}"
          login_image: "{{ cluster_image }}"
          control_image: "{{ cluster_image }}"
          compute_image: "{{ cluster_image }}"
          login_flavor: "{{ login_flavor }}"
          control_flavor: "{{ login_flavor }}"
          compute_flavor: "{{ compute_flavor }}"
  # If cluster validation was requested, add the cluster hosts to the openhpc_tests group
  post_tasks:
    - name: Add cluster hosts to openhpc_tests group
      add_host:
        name: "{{ item }}"
        groups: openhpc_tests
      loop: "{{ groups['cluster'] }}"
      when: "cluster_run_validation | bool"

# Ensure that the secrets are generated and persisted on the control host
- name: Generate and persist secrets
  hosts: control
  gather_facts: no
  become: yes
  roles: [persist_openhpc_secrets]

# Configure the hosts as a Slurm cluster
# Use the playbooks invidually rather than the site playbook as it avoids the
#Â need to define the environment variables referencing an environment
- import_playbook: vendor/stackhpc/ansible-slurm-appliance/ansible/validate.yml

# Apply updates as part of the bootstrap playbook if requested
- import_playbook: vendor/stackhpc/ansible-slurm-appliance/ansible/bootstrap.yml
  vars:
    update_enable: "{{ cluster_upgrade_system_packages | default('false') | bool }}"

- import_playbook: vendor/stackhpc/ansible-slurm-appliance/ansible/filesystems.yml
- import_playbook: vendor/stackhpc/ansible-slurm-appliance/ansible/slurm.yml

# Temporarily, the grafana_install tag is skipped (see ansible.cfg) and we install Grafana manually here
# https://github.com/grafana/grafana/issues/36935
# TODO: REMOVE THIS
- name: Install Grafana
  hosts: grafana
  tags: grafana
  become: yes
  tasks:
    - name: Install Grafana from RPM
      yum:
        name: https://dl.grafana.com/oss/release/grafana-8.0.6-1.x86_64.rpm
        disable_gpg_check: yes
        state: present

- import_playbook: vendor/stackhpc/ansible-slurm-appliance/ansible/monitoring.yml
- import_playbook: vendor/stackhpc/ansible-slurm-appliance/ansible/adhoc/test.yml
